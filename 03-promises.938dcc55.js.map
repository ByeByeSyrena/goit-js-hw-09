{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAG9BC,GAFYF,SAASC,cAAc,yBAE5B,CACbE,UAAWJ,EAAKK,SAASC,MAAMC,MAC/BC,SAAUR,EAAKK,SAASI,KAAKF,MAC7BG,WAAYV,EAAKK,SAASM,OAAOJ,QAmCjC,SAASK,EAAcC,EAAUP,GACf,IAAIQ,SAAQ,CAACC,EAAKC,KAChC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACVH,EACFF,EAAI,C,SAAEF,E,MAAUP,IAEhBU,EAAI,C,SAAEH,E,MAAUP,GAAQ,GAEpBH,EAAKC,UAAU,G,CAzCtBJ,EAAKqB,iBAAiB,UAEtB,SAAoBC,GAEhBA,EAAMC,iBAER,MAAQnB,UAAAoB,EAAShB,SAAEA,EAAQE,WAAEA,GAAeP,EAE5C,GAAIqB,EAAY,GAAKhB,EAAW,GAAKE,EAAa,EAChDe,EAAA3B,GAAS4B,OAAOC,QAAQ,gCAEtB,IAAG,IAAIC,EAAI,EAAGA,GAAKlB,EAAYkB,GAAK,EAAG,CAIvChB,EAHcgB,EAAI,EACLJ,EAAYhB,EAAWoB,GAIlCC,QAAQC,MAAK,CAACjB,EAAUT,KACtBqB,EAAA3B,GAAS4B,OAAOK,QACd,uBAAqBlB,QAAiBT,MAAc,IAGvD4B,OAAM,CAACnB,EAAUT,KAChBqB,EAAA3B,GAAS4B,OAAOO,QACd,sBAAoBpB,QAAeT,MAAc,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\");\nconst submitBtn = document.querySelector(\"button[type='submit']\");\n\nconst refs = {\nuserDelay: form.elements.delay.value,\nuserStep: form.elements.step.value,\nuserAmount: form.elements.amount.value,\n}\n\nform.addEventListener(\"submit\", submitForm);\n\nfunction submitForm(event) { \n\n    event.preventDefault();\n\n  const { userDelay, userStep, userAmount } = refs;\n\n  if (userDelay < 0 || userStep < 0 || userAmount < 0) {\n    Notiflix.Notify.warning(`❌ Only positive numbers`);\n  } else {\n    for (let i = 0; i <= userAmount; i += 1) {\n   const position = i + 1;\n    const delays = userDelay + userStep * i;\n\n      createPromise(position, delays); \n\n        promise.then((position, userDelay) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${userDelay}ms`\n          );\n        })\n        .catch((position, userDelay) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${userDelay}ms`\n          );\n        });\n     };\n\n   };\n};\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n if (shouldResolve) {\n   res({ position, delay });\n } else {\n   rej({ position, delay });\n }\n    }, refs.userDelay)\n  })\n};\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$refs","userDelay","elements","delay","value","userStep","step","userAmount","amount","$47d4ff9957288465$var$createPromise","position","Promise","res","rej","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","userDelay1","$parcel$interopDefault","Notify","warning","i","promise","then","success","catch","failure"],"version":3,"file":"03-promises.938dcc55.js.map"}